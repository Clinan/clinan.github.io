(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{481:function(t,a,s){"use strict";s.r(a);var _=s(10),r=Object(_.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"限流算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#限流算法"}},[t._v("#")]),t._v(" 限流算法")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://blog.csdn.net/weixin_41846320/article/details/95941361",target:"_blank",rel:"noopener noreferrer"}},[t._v("转载自"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"计数器-固定窗口-算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#计数器-固定窗口-算法"}},[t._v("#")]),t._v(" 计数器（固定窗口）算法")]),t._v(" "),s("p",[t._v("计数器算法是使用计数器在周期内累加访问次数，当达到设定的限流值的时候，触发限流策略。下一个周期开始时，清零并重新计数。")]),t._v(" "),s("h3",{attrs:{id:"优点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[t._v("#")]),t._v(" 优点")]),t._v(" "),s("p",[t._v("此算法无论是单机还是分布式情况下实现都非常简单，使用redis的incr原子自增性和线程安全就可以轻松实现。")]),t._v(" "),s("h3",{attrs:{id:"缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),s("p",[t._v("这个算法通常用于QPS限流和统计总访问量，对于秒级以上的时间周期来说，会存在一个非常严重的临界问题。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190716091413825.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTg0NjMyMA==,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),s("p",[t._v("假设一分钟内服务器的负载能力为100，因此一个周期的访问量限制在100，然而在第一个周期的最后5秒和下一个周期的开始5秒时间段内，分别涌入100的访问量，虽然没有超过那个周期的限制量，但是整体上10秒内已达到200的访问量，超过了服务器的负载能力。因此计数器算法方式限流对于周期比较长的限流，存在很大的弊端。")]),t._v(" "),s("h2",{attrs:{id:"滑动窗口算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#滑动窗口算法"}},[t._v("#")]),t._v(" 滑动窗口算法")]),t._v(" "),s("p",[t._v("滑动窗口算法是将时间周期分为N个小周期，分别记录每个小周期内访问次数，并且根据时间滑动删除过期的小周期。")]),t._v(" "),s("p",[t._v("如下图，假设时间周期为1min，将1min再分为2个小周期，统计每个小周期的访问数量，则可以看到，第一个时间周期内，访问数量75，第二个为100，超过100的访问则被限流掉。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190716091612718.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTg0NjMyMA==,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),s("ol",[s("li",[t._v("避免了计数器固定窗口算法固定窗口切换时可能会产生两倍于阈值流量请求的问题；")]),t._v(" "),s("li",[t._v("和漏斗算法相比，新来的请求也能够被处理到，避免了漏斗算法的饥饿问题。")])]),t._v(" "),s("h2",{attrs:{id:"漏斗算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#漏斗算法"}},[t._v("#")]),t._v(" 漏斗算法")]),t._v(" "),s("p",[t._v("漏斗算法是在请求到达时，将请求全部放入到漏斗中，如果达到上限，则直接丢弃（限流）。然后漏斗始终以恒定的速率将请求流出进行处理，从而达到平滑流量的作用。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190716090944456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTg0NjMyMA==,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"特点-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特点-2"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),s("p",[s("strong",[t._v("漏桶的漏出速率是固定的，可以起到整流的作用")]),t._v("。即虽然请求的流量可能具有随机性,忽大忽小，但是经过漏斗算法之后，变成了有固定速率的稳定流量，从而对下游的系统起到保护作用。")]),t._v(" "),s("p",[s("strong",[t._v("不能解决流量突发的问题")]),t._v("。还是拿刚刚测试的例子，我们设定的漏斗速率是2个/秒，然后突然来了10个请求，受限于漏斗的容量，只有5个请求被接受，另外5个被拒绝。你可能会说，漏斗速率是2个/秒，然后瞬间接受了5个请求，这不就解决了流量突发的问题吗？不，这5个请求只是被接受了，但是没有马上被处理，处理的速度仍然是我们设定的2个/秒，所以没有解决流量突发的问题。而接下来我们要谈的令牌桶算法能够在一定程度上解决流量突发的问题。")]),t._v(" "),s("h2",{attrs:{id:"令牌桶算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#令牌桶算法"}},[t._v("#")]),t._v(" 令牌桶算法")]),t._v(" "),s("p",[t._v("令牌桶算法是对漏斗算法的一种改进，除了能够起到限流的作用外，还允许一定程度的流量突发。")]),t._v(" "),s("p",[t._v("在令牌桶算法中，存在一个令牌桶，算法中存在一种机制以恒定的速率向令牌桶中放入令牌。令牌桶也有一定的容量，如果满了令牌就无法放进去了。当请求到达时，会首先到令牌桶中去拿令牌，如果拿到了令牌，则该请求会被处理，并消耗掉拿到的令牌；如果令牌桶为空，则请求会被丢弃。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190716090944463.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTg0NjMyMA==,size_16,color_FFFFFF,t_70",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"特点分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特点分析"}},[t._v("#")]),t._v(" 特点分析")]),t._v(" "),s("p",[t._v("令牌桶算法是对漏桶算法的一种改进，除了能够在限制调用的平均速率的同时还允许一定程度的流量突发。")]),t._v(" "),s("h2",{attrs:{id:"小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),s("p",[t._v("对上述四种限流算法进行一下简单的总结。")]),t._v(" "),s("p",[s("strong",[t._v("计数器固定窗口算法")]),t._v("实现简单，容易理解。和漏斗算法相比，新来的请求也能够被马上处理到。但是流量曲线可能不够平滑，有“突刺现象”，在窗口切换时可能会产生两倍于阈值流量的请求。")]),t._v(" "),s("p",[s("strong",[t._v("计数器滑动窗口算法")]),t._v("作为计数器固定窗口算法的一种改进，有效解决了窗口切换时可能会产生两倍于阈值流量请求的问题。")]),t._v(" "),s("p",[s("strong",[t._v("漏斗算法")]),t._v("能够对流量起到整流的作用，让随机不稳定的流量以固定的速率流出，但是不能解决"),s("strong",[t._v("流量突发")]),t._v("的问题。")]),t._v(" "),s("p",[s("strong",[t._v("令牌桶算法")]),t._v("作为漏斗算法的一种改进，除了能够起到平滑流量的作用，还允许一定程度的流量突发。")]),t._v(" "),s("p",[t._v("以上四种限流算法都有自身的特点，具体使用时还是要结合自身的场景进行选取，"),s("strong",[t._v("没有最好的算法，只有最合适的算法")]),t._v("。比如令牌桶算法一般用于保护自身的系统，对调用者进行限流，保护自身的系统不被突发的流量打垮。如果自身的系统实际的处理能力强于配置的流量限制时，可以允许一定程度的流量突发，使得实际的处理速率高于配置的速率，充分利用系统资源。")]),t._v(" "),s("p",[t._v("而漏斗算法一般用于"),s("strong",[t._v("保护第三方")]),t._v("的系统，比如自身的系统需要调用第三方的接口，为了保护第三方的系统不被自身的调用打垮，便可以通过漏斗算法进行限流，保证自身的流量平稳的打到第三方的接口上。 算法是死的，而算法中的"),s("strong",[t._v("思想精髓")]),t._v("才是值得我们学习的。")])])}),[],!1,null,null,null);a.default=r.exports}}]);