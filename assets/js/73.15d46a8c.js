(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{510:function(o,a,t){"use strict";t.r(a);var n=t(10),e=Object(n.a)({},(function(){var o=this,a=o.$createElement,t=o._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":o.$parent.slotKey}},[t("h1",{attrs:{id:"springboot自动化配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springboot自动化配置"}},[o._v("#")]),o._v(" springboot自动化配置")]),o._v(" "),t("h2",{attrs:{id:"enable相关注解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#enable相关注解"}},[o._v("#")]),o._v(" Enable相关注解")]),o._v(" "),t("ol",[t("li",[t("code",[o._v("@SpringBootApplication")]),o._v("包含了"),t("code",[o._v("@SpringBootConfiguration(等同于@Configuration),@EnableAutoConfiguration,@ComponentScan")])])]),o._v(" "),t("h2",{attrs:{id:"主要的注解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#主要的注解"}},[o._v("#")]),o._v(" 主要的注解")]),o._v(" "),t("ol",[t("li",[t("code",[o._v("ConditionalOnClass")]),o._v("判断在类路径下是否存在该类，如果存在则执行方法")]),o._v(" "),t("li",[t("code",[o._v("ConditionalOnResource")]),o._v("判断在类路径下是否存在资源，如果存在则执行方法")]),o._v(" "),t("li",[t("code",[o._v("ConditionalOnMissingBean")]),o._v("判断BeanFactory中没有对应class或是name的Bean，不存在则执行方法")]),o._v(" "),t("li",[t("code",[o._v("Qualifier")]),o._v("限定符，可以指定注入的bean的名称，如果接口有多个实现类时，可以通过这个方式限定是哪个实现类")]),o._v(" "),t("li",[t("code",[o._v("@Import")]),o._v("实例化类成为Bean")])]),o._v(" "),t("h2",{attrs:{id:"如何作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何作用"}},[o._v("#")]),o._v(" 如何作用")]),o._v(" "),t("ol",[t("li",[o._v("如果引入了相关的jar包， "),t("code",[o._v("ConditionalOnClass")]),o._v("会检查是否有对应类的存在，然后初始化相关的bean")]),o._v(" "),t("li",[o._v("如果有配置文件的存在，则需要"),t("code",[o._v("ConditionalOnResource")]),o._v("来判断文件是否存在")]),o._v(" "),t("li",[t("code",[o._v("ConditionalOnMissingBean")]),o._v("是为了避免用户自己配置了相关的bean,springboot还会再创建的冲突。")]),o._v(" "),t("li",[t("code",[o._v("Qualifier")]),o._v("是在避免不了第三点冲突上，提供一个name来指定注入的bean")])]),o._v(" "),t("h2",{attrs:{id:"springboot-war包启动"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springboot-war包启动"}},[o._v("#")]),o._v(" springboot war包启动")]),o._v(" "),t("ol",[t("li",[o._v("启动类继承"),t("code",[o._v("SpringBootServletInitializer")])]),o._v(" "),t("li",[t("code",[o._v("pom.xml")]),o._v("中把打包方式改为war")]),o._v(" "),t("li",[o._v("如果配置了端口，ssl等之类在配置文件中设置的参数，使用了外置容器（tomcat）之后将不会生效。")]),o._v(" "),t("li",[o._v("websocket的"),t("code",[o._v("ServerEndpointExporter")]),o._v("bean也要去掉，这个会在tomcat中自动配置好的。")])])])}),[],!1,null,null,null);a.default=e.exports}}]);