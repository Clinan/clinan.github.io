(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{482:function(s,a,t){"use strict";t.r(a);var i=t(10),e=Object(i.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"短地址生成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#短地址生成"}},[s._v("#")]),s._v(" 短地址生成")]),s._v(" "),t("h2",{attrs:{id:"长地址映射到一个唯一的id"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#长地址映射到一个唯一的id"}},[s._v("#")]),s._v(" 长地址映射到一个唯一的id")]),s._v(" "),t("p",[s._v("设计一个发号器。生成一个从0开始的id。")]),s._v(" "),t("p",[s._v("比如第一个要转换的网址"),t("code",[s._v("https://www.clinan.xyz/homepage")]),s._v("得到得到id=1；第二个则给ID为2。以此类推。")]),s._v(" "),t("h3",{attrs:{id:"可以实现长网站到短网址的一一对应吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可以实现长网站到短网址的一一对应吗"}},[s._v("#")]),s._v(" 可以实现长网站到短网址的一一对应吗")]),s._v(" "),t("p",[s._v("不行，不存在一个算法，可以将长网址转为短网址。短网址逆运算得到长网址。否则的话，压缩算法那该多容易实现呀。")]),s._v(" "),t("h3",{attrs:{id:"如何保证发号器的大并发高可用。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何保证发号器的大并发高可用。"}},[s._v("#")]),s._v(" 如何保证发号器的大并发高可用。")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("发号器集群部署多个。理论如下。")])]),s._v(" "),t("li",[t("p",[s._v("那就可以使用多个发号器，比如两个发号器可以一个发单号，一个发双号。单个发号器每次+2。")])]),s._v(" "),t("li",[t("p",[s._v("以此类推，一千个发号器，每个发号器发从0-999的一个号，每次+1000。")])])]),s._v(" "),t("h3",{attrs:{id:"按照上面的方式来-每次生成的id超过了长度限制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#按照上面的方式来-每次生成的id超过了长度限制"}},[s._v("#")]),s._v(" 按照上面的方式来，每次生成的ID超过了长度限制")]),s._v(" "),t("p",[s._v("可以将这个64位的ID转换为由"),t("code",[s._v("a-z A-Z 0-9")]),s._v("构成的62进制。")]),s._v(" "),t("section",[t("eqn",[t("span",{staticClass:"katex-display"},[t("span",{staticClass:"katex"},[t("span",{staticClass:"katex-mathml"},[t("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[t("semantics",[t("mrow",[t("mn",[s._v("6")]),t("msup",[t("mn",[s._v("2")]),t("mn",[s._v("7")])],1),t("mo",[s._v("=")]),t("mn",[s._v("3")]),t("mo",{attrs:{separator:"true"}},[s._v(",")]),t("mn",[s._v("521")]),t("mo",{attrs:{separator:"true"}},[s._v(",")]),t("mn",[s._v("614")]),t("mo",{attrs:{separator:"true"}},[s._v(",")]),t("mn",[s._v("606")]),t("mo",{attrs:{separator:"true"}},[s._v(",")]),t("mn",[s._v("208")]),t("mo",[s._v("≈")]),t("mn",[s._v("35000")]),t("mtext",[s._v("亿")])],1),t("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("\n62^7=3,521,614,606,208≈35000亿\n")])],1)],1)],1),t("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[t("span",{staticClass:"base"},[t("span",{staticClass:"strut",staticStyle:{height:"0.8641079999999999em","vertical-align":"0em"}}),t("span",{staticClass:"mord"},[s._v("6")]),t("span",{staticClass:"mord"},[t("span",{staticClass:"mord"},[s._v("2")]),t("span",{staticClass:"msupsub"},[t("span",{staticClass:"vlist-t"},[t("span",{staticClass:"vlist-r"},[t("span",{staticClass:"vlist",staticStyle:{height:"0.8641079999999999em"}},[t("span",{staticStyle:{top:"-3.113em","margin-right":"0.05em"}},[t("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),t("span",{staticClass:"sizing reset-size6 size3 mtight"},[t("span",{staticClass:"mord mtight"},[s._v("7")])])])])])])])]),t("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),t("span",{staticClass:"mrel"},[s._v("=")]),t("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),t("span",{staticClass:"base"},[t("span",{staticClass:"strut",staticStyle:{height:"0.8388800000000001em","vertical-align":"-0.19444em"}}),t("span",{staticClass:"mord"},[s._v("3")]),t("span",{staticClass:"mpunct"},[s._v(",")]),t("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),t("span",{staticClass:"mord"},[s._v("5")]),t("span",{staticClass:"mord"},[s._v("2")]),t("span",{staticClass:"mord"},[s._v("1")]),t("span",{staticClass:"mpunct"},[s._v(",")]),t("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),t("span",{staticClass:"mord"},[s._v("6")]),t("span",{staticClass:"mord"},[s._v("1")]),t("span",{staticClass:"mord"},[s._v("4")]),t("span",{staticClass:"mpunct"},[s._v(",")]),t("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),t("span",{staticClass:"mord"},[s._v("6")]),t("span",{staticClass:"mord"},[s._v("0")]),t("span",{staticClass:"mord"},[s._v("6")]),t("span",{staticClass:"mpunct"},[s._v(",")]),t("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),t("span",{staticClass:"mord"},[s._v("2")]),t("span",{staticClass:"mord"},[s._v("0")]),t("span",{staticClass:"mord"},[s._v("8")]),t("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),t("span",{staticClass:"mrel"},[s._v("≈")]),t("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),t("span",{staticClass:"base"},[t("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),t("span",{staticClass:"mord"},[s._v("3")]),t("span",{staticClass:"mord"},[s._v("5")]),t("span",{staticClass:"mord"},[s._v("0")]),t("span",{staticClass:"mord"},[s._v("0")]),t("span",{staticClass:"mord"},[s._v("0")]),t("span",{staticClass:"mord cjk_fallback"},[s._v("亿")])])])])])])],1),t("p",[s._v("对于一个长达35000亿长度的ID来说，转为62进制最多只需要7个字符。所以是够用的。")]),s._v(" "),t("h3",{attrs:{id:"如何保证同一个长网址每次转出来都是同一个短网址"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何保证同一个长网址每次转出来都是同一个短网址"}},[s._v("#")]),s._v(" 如何保证同一个长网址每次转出来都是同一个短网址")]),s._v(" "),t("p",[s._v("做缓存。如果缓存中有，则返回已有的，否则重新生成。具体看下面")]),s._v(" "),t("h2",{attrs:{id:"如何实现短网址到长网址的映射-长到短的映射"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何实现短网址到长网址的映射-长到短的映射"}},[s._v("#")]),s._v(" 如何实现短网址到长网址的映射/ 长到短的映射")]),s._v(" "),t("p",[s._v("使用"),t("code",[s._v("key-value")]),s._v("的缓存来存储。保存最近生成的长对短的一个对应关系。也就是说不是保存全量的映射关系，而只是保存最近的。比如采用一小时过期的机制，使用LRU淘汰策略。")]),s._v(" "),t("p",[s._v("这样的话，长转短的流程变成这样： 1 在这个“最近”表中查看一下，看长地址有没有对应的短地址 1.1 有就直接返回，并且将这个key-value对的过期时间再延长成一小时 1.2 如果没有，就通过发号器生成一个短地址，并且将这个“最近”表中，过期时间为1小时")]),s._v(" "),t("p",[s._v("所以当一个地址被频繁使用，那么它会一直在这个key-value表中，总能返回当初生成那个短地址，不会出现重复的问题。如果它使用并不频繁，那么长对短的key会过期，LRU机制自动就会淘汰掉它。")]),s._v(" "),t("p",[s._v("当然，这不能保证100%的同一个长地址一定能转出同一个短地址，比如你拿一个生僻的url，每间隔1小时来转一次，你会得到不同的短地址。但是这真的有关系吗？")]),s._v(" "),t("h2",{attrs:{id:"跳转用301还是302"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#跳转用301还是302"}},[s._v("#")]),s._v(" 跳转用301还是302")]),s._v(" "),t("p",[s._v("浏览器缓存机制的理解。然后是考察他的业务经验。301是永久重定向，302是临时重定向。短地址一经生成就不会变化，所以用301是符合http语义的。同时对服务器压力也会有一定减少。 但是如果使用了301，我们就无法统计到短地址被点击的次数了。而这个点击次数是一个非常有意思的大数据分析数据源。能够分析出的东西非常非常多。所以选择302虽然会增加服务器压力，但是我想是一个更好的选择。")])])}),[],!1,null,null,null);a.default=e.exports}}]);