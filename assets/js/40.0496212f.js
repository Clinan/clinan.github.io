(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{444:function(t,a,s){"use strict";s.r(a);var n=s(10),e=function(t){t.options.__data__block__={mermaid_382ee18c:"classDiagram\n\tInputStream<|--FileInputStream\n\tInputStream<|--ByteArrayInputStream\n\tInputStream<|--SequenceInputStream\n\tInputStream<|--StringBufferInputStream\n\tInputStream<|--FilterInputStream\n\tFilterInputStream<|--BufferedInputStream\n\tFilterInputStream<|--PushbackInputStream\n\tFilterInputStream<|--DataInputStream\n\tFilterInputStream<|--LineNumberInputStream\n",mermaid_382ee206:"classDiagram\n\tCommand <|-- LightCommand\n\tCommand: +execute()\n\tLightCommand : +execute() \n\tLightCommand : -light\n\t\n\tLightCommand<--Light:使用\n\tLight: +on()\n\tLight: +off()\n\t\n\tInvoker--\x3eCommand : 使用\n\tInvoker: -commands\n\tInvoker: +excuteCommands(迭代执行)\n\t\n\tCommand <|-- DoorCommand\n\tDoorCommand : +execute() \n\tDoorCommand : -door\n\tDoorCommand<--Door:使用\n\tDoor: +open()\n\tDoor: +close()\n"}},r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"设计模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[t._v("#")]),t._v(" 设计模式")]),t._v(" "),s("h2",{attrs:{id:"策略模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#策略模式"}},[t._v("#")]),t._v(" 策略模式")]),t._v(" "),s("p",[s("strong",[t._v("可以将互换的行为封装起来，然后使用委托的方法，决定使用哪一个行为。")])]),t._v(" "),s("p",[t._v("鸭子，鸭鸣器。")]),t._v(" "),s("p",[t._v("可以在运行的时候设置策略，比如说鸭子本来会飞，但是某一天翅膀受伤了，就不能飞了。此时这个鸭子要设置为不能飞翔的策略。")]),t._v(" "),s("p",[t._v("比如，游戏角色。武器可以是剑，弓箭，手枪。在运行的过程中可以切换武器。")]),t._v(" "),s("h2",{attrs:{id:"观察者模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#观察者模式"}},[t._v("#")]),t._v(" 观察者模式")]),t._v(" "),s("p",[t._v("气象监测应用的显示")]),t._v(" "),s("h2",{attrs:{id:"装饰者模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#装饰者模式"}},[t._v("#")]),t._v(" 装饰者模式")]),t._v(" "),s("p",[t._v("Decorator pattern，装饰器模式。也叫包装器模式（Wrapper Pattern）,是指在不改变原有对象的基础上，将功能附加到对象上，")]),t._v(" "),s("p",[t._v("提供了比继承更有弹性的替代方案（扩展原有对象的功能）")]),t._v(" "),s("p",[t._v("属于结构型模式。")]),t._v(" "),s("p",[s("code",[t._v("JavaIO")]),t._v(" 类")]),t._v(" "),s("Mermaid",{attrs:{id:"mermaid_382ee18c",graph:t.$dataBlock.mermaid_382ee18c}}),s("h2",{attrs:{id:"工厂模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#工厂模式"}},[t._v("#")]),t._v(" 工厂模式")]),t._v(" "),s("h3",{attrs:{id:"工厂方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#工厂方法"}},[t._v("#")]),t._v(" 工厂方法")]),t._v(" "),s("p",[t._v("工厂方法一般用于创建一个具体的实现类。")]),t._v(" "),s("p",[t._v("如创建不同口味的pizza")]),t._v(" "),s("h3",{attrs:{id:"抽象工厂"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#抽象工厂"}},[t._v("#")]),t._v(" 抽象工厂")]),t._v(" "),s("p",[t._v("抽象工厂用于创建相关或依赖对象的家族，而不需要明确指定具体类。")]),t._v(" "),s("p",[t._v("如创建pizza的原材料（面粉，芝士，等等原料）")]),t._v(" "),s("p",[t._v("一般具体的原料也可以使用"),s("strong",[t._v("工厂方法")]),t._v("进行创建")]),t._v(" "),s("h2",{attrs:{id:"单例模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单例模式"}},[t._v("#")]),t._v(" 单例模式")]),t._v(" "),s("h3",{attrs:{id:"多线程-双检查锁-double-checked-locking"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多线程-双检查锁-double-checked-locking"}},[t._v("#")]),t._v(" 多线程（双检查锁，double-checked locking）")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// volatile 关键字保证，当uniqueInstance被实例时，多个线程能正确的获取uniqueInstance变量")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),t._v(" uniqueInstance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 检查实例，如果不存在就进入同步块")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uniqueInstance "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注意，只有第一次才彻底执行这里的代码")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 进入同步块后，再次检查，如果还是null才创建。")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uniqueInstance "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    uniqueInstance "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" uniqueInstance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"命令模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命令模式"}},[t._v("#")]),t._v(" 命令模式")]),t._v(" "),s("p",[t._v("将多个不标准的对象继承成为"),s("code",[t._v("Command")]),t._v("，")]),t._v(" "),s("Mermaid",{attrs:{id:"mermaid_382ee206",graph:t.$dataBlock.mermaid_382ee206}}),s("p",[t._v("使用场景，如文档的历史，撤销，重做之类的事务，等等。")]),t._v(" "),s("ul",[s("li",[t._v("重做日志")]),t._v(" "),s("li",[t._v("事务")])]),t._v(" "),s("h2",{attrs:{id:"模板方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模板方法"}},[t._v("#")]),t._v(" 模板方法")]),t._v(" "),s("p",[t._v("由子类决定如何实现某些步骤")]),t._v(" "),s("h2",{attrs:{id:"状态模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#状态模式"}},[t._v("#")]),t._v(" 状态模式")]),t._v(" "),s("p",[s("strong",[t._v("封装基于状态的行为，并将行为委托到当前状态。")])]),t._v(" "),s("p",[t._v("定义接口类"),s("code",[t._v("State")]),t._v("，所有状态都继承于这个接口或是抽象类")]),t._v(" "),s("h2",{attrs:{id:"外观-适配器-代理模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#外观-适配器-代理模式"}},[t._v("#")]),t._v(" 外观，适配器，代理模式")]),t._v(" "),s("p",[t._v("Facade Pattern,又称外观模式。提供一个统一的接口，用来访问子系统中的一群接口。")]),t._v(" "),s("p",[t._v("属于结构型设计模式。")]),t._v(" "),s("h3",{attrs:{id:"双向适配器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#双向适配器"}},[t._v("#")]),t._v(" 双向适配器")]),t._v(" "),s("p",[t._v("A适配B，B也适配A")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("对比项")]),t._v(" "),s("th",[t._v("外观")]),t._v(" "),s("th",[t._v("适配器")]),t._v(" "),s("th",[t._v("代理")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("继承类或是接口")]),t._v(" "),s("td",[t._v("接口")]),t._v(" "),s("td",[t._v("接口")]),t._v(" "),s("td",[t._v("类或接口")])]),t._v(" "),s("tr",[s("td",[t._v("是否只有一个代理对象")]),t._v(" "),s("td",[t._v("否，可以有多个")]),t._v(" "),s("td",[t._v("只有一个")]),t._v(" "),s("td",[t._v("只有一个")])]),t._v(" "),s("tr",[s("td",[t._v("是否可以拓展public方法")]),t._v(" "),s("td",[t._v("可以")]),t._v(" "),s("td",[t._v("不可以，只是为了")]),t._v(" "),s("td",[t._v("不可以")])]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td")])])])],1)}),[],!1,null,null,null);"function"==typeof e&&e(r);a.default=r.exports}}]);