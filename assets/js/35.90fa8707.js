(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{480:function(e,r,t){"use strict";t.r(r);var a=t(10),s=Object(a.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"共识算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#共识算法"}},[e._v("#")]),e._v(" 共识算法")]),e._v(" "),t("p",[e._v("https://draveness.me/consensus/")]),e._v(" "),t("h2",{attrs:{id:"paxos"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#paxos"}},[e._v("#")]),e._v(" Paxos")]),e._v(" "),t("p",[e._v("Paxos将系统中的角色分为提议者 (Proposer)，决策者 (Acceptor)，和最终决策学习者 (Learner):")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("Proposer")]),e._v(": 提出提案 (Proposal)。Proposal信息包括提案编号 (Proposal ID) 和提议的值 (Value)。")]),e._v(" "),t("li",[t("strong",[e._v("Acceptor")]),e._v("：参与决策，回应Proposers的提案。收到Proposal后可以接受提案，若Proposal获得多数Acceptors的接受，则称该Proposal被批准。")]),e._v(" "),t("li",[t("strong",[e._v("Learner")]),e._v("：不参与决策，从Proposers/Acceptors学习最新达成一致的提案（Value）。")])]),e._v(" "),t("h3",{attrs:{id:"两阶段prepare-accept"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#两阶段prepare-accept"}},[e._v("#")]),e._v(" 两阶段prepare accept")]),e._v(" "),t("p",[e._v("Paxos算法通过一个决议分为两个阶段（Learn阶段之前决议已经形成）：")]),e._v(" "),t("ol",[t("li",[e._v("第一阶段："),t("strong",[e._v("Prepare阶段")]),e._v("。Proposer向Acceptors发出Prepare请求，Acceptors针对收到的Prepare请求进行Promise承诺。")]),e._v(" "),t("li",[e._v("第二阶段："),t("strong",[e._v("Accept阶段")]),e._v("。Proposer收到多数Acceptors承诺的Promise后，向Acceptors发出Propose请求，Acceptors针对收到的Propose请求进行Accept处理。")]),e._v(" "),t("li",[e._v("第三阶段："),t("strong",[e._v("Learn阶段")]),e._v("。Proposer在收到多数Acceptors的Accept之后，标志着本次Accept成功，决议形成，将形成的决议发送给所有Learners。")])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://pic2.zhimg.com/80/v2-a6cd35d4045134b703f9d125b1ce9671_720w.jpg",alt:""}})]),e._v(" "),t("h2",{attrs:{id:"multi-paxos"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#multi-paxos"}},[e._v("#")]),e._v(" Multi paxos")]),e._v(" "),t("p",[e._v("由于大多数的分布式集群都需要接受一系列的值，如果使用 Basic Paxos 来处理数据流，那么就会导致非常明显的性能损失，而 Multi-Paxos 是前者的加强版，如果集群中的 "),t("strong",[e._v("Leader 是非常稳定")]),e._v("的，那么我们往往不需要准备（"),t("strong",[e._v("Prepare")]),e._v("）阶段的工作，这样就能够将 RPC 的数量减少一半。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://img.draveness.me/2017-12-18-multi-paxos-example.png",alt:""}})]),e._v(" "),t("p",[e._v("上述图片中描述的就是稳定阶段 Multi-Paxos 的处理过程，S1 是整个集群的 Leader，当其他的服务器接收到来自客户端的请求时，都会将请求转发给 Leader 进行处理。")]),e._v(" "),t("p",[e._v("当然，Leader 角色的出现自然会带来另一个问题，也就是 Leader 究竟应该如何选举，在 "),t("a",{attrs:{href:"http://140.123.102.14:8080/reportSys/file/paper/lei/lei_5_paper.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Paxos Made Simple"),t("OutboundLink")],1),e._v(" 一文中并没有给出 Multi-Paxos 的具体实现方法和细节，所以不同 Multi-Paxos 的实现上总有各种各样细微的差别。")]),e._v(" "),t("h2",{attrs:{id:"raft"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#raft"}},[e._v("#")]),e._v(" raft")]),e._v(" "),t("p",[e._v("http://thesecretlivesofdata.com/raft/")]),e._v(" "),t("p",[e._v("在Raft中，节点有三种角色：")]),e._v(" "),t("ol",[t("li",[e._v("Leader：负责接收客户端的请求")]),e._v(" "),t("li",[e._v("Candidate：候选人，用于选举Leader的一种角色(竞选状态)")]),e._v(" "),t("li",[e._v("Follower：负责响应来自Leader或者Candidate的请求")])]),e._v(" "),t("p",[e._v("Raft 其实就是 Multi-Paxos 的一个变种，Raft 通过简化 Multi-Paxos 的模型，实现了一种更容易让人理解的共识算法，它们两者都能够对一系列连续的问题达成一致。")]),e._v(" "),t("h3",{attrs:{id:"领袖选举"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#领袖选举"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://zh.wikipedia.org/wiki/Raft",target:"_blank",rel:"noopener noreferrer"}},[e._v("领袖选举"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("在起始算法或领袖死机、断线的时候，就需要选举出新的领袖。")]),e._v(" "),t("p",[e._v("此时集群进入新的任期（英语：term）并开始选举，如果选举成功则新的领袖开始运行工作，反之则视此任期终止，开始新的任期并开始下一场选举。")]),e._v(" "),t("p",[e._v("选举是由候选人发动的。当领袖的心跳超时的时候，追随者就会把自己的任期编号（英语：term counter）加一、宣告竞选、投自己一票、并向其他服务器拉票。每个服务器在每个任期只会投一票，固定投给最早拉票的服务器。")]),e._v(" "),t("p",[e._v("如果候选人收到其他候选人的拉票、而且拉票的任期编号不小于自己的任期编号，就会自认落选，成为追随者，并认定来拉票的候选人为领袖。如果有候选人收到过半的选票就当选为新的领袖。如果超时仍没有选出新领袖，此任期自动终止，开始新的任期并开始下一场选举。")]),e._v(" "),t("p",[e._v("Raft每个服务器的超时期限是随机的，这降低候选服务同时竞选的几率，也降低因两个竞选人得票都不过半而选举失败的几率。")]),e._v(" "),t("p",[e._v("Raft 在 Multi-Paxos 的基础之上做了两个限制，首先是 Raft 中追加日志的操作必须是连续的，而 Multi-Paxos 中追加日志的操作是并发的，但是对于节点内部的状态机来说两者都是有序的，第二就是 Raft 对 Leader 选举的条件做了限制，只有拥有最新、最全日志的节点（Kafka Broker）才能够当选 Leader，但是 Multi-Paxos 由于任意节点都可以写日志，所以在选择 Leader 上也没有什么限制，只是在选择 Leader 之后需要将 Leader 中的日志补全。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://img.draveness.me/2017-12-18-multi-paxos-and-raft-log.png",alt:""}})]),e._v(" "),t("h5",{staticStyle:{"text-align":"center"}},[e._v("A,B,C表示日志，在Raft中，Leader始终拥有全量日志")]),e._v(" "),t("p",[e._v("在 Raft 中，所有 Follower 的日志都是 Leader 的子集，而 Multi-Paxos 中的日志并不会做这个保证，由于 Raft 对日志追加的方式和选举过程进行了限制，所以在实现上会更加容易和简单。")]),e._v(" "),t("p",[e._v("从理论上来讲，支持并发日志追加的 Paxos 会比 Raft 有更优秀的性能，不过其理解和实现上还是比较复杂的，很多人都会说 Paxos 是科学，而 Raft 是工程，当作者需要去实现一个共识算法，会选择使用 Raft 和更简洁的实现，避免因为一些边界条件而带来的复杂问题。")]),e._v(" "),t("blockquote",[t("p",[e._v("这篇文章并不会展开介绍 Raft 的实现过程和细节，如果对 Raft 有兴趣的读者可以在 "),t("a",{attrs:{href:"https://raft.github.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("The Raft Consensus Algorithm"),t("OutboundLink")],1),e._v(" 找到非常多的资料。")])])])}),[],!1,null,null,null);r.default=s.exports}}]);