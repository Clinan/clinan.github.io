(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{501:function(t,s,a){"use strict";a.r(s);var e=a(10),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"redis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis"}},[t._v("#")]),t._v(" REDIS")]),t._v(" "),a("h2",{attrs:{id:"字符串拓展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串拓展"}},[t._v("#")]),t._v(" 字符串拓展")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("自定义的简单动态字符串（sds,  simple dynamic string）")])]),t._v(" "),a("li",[a("p",[t._v("以空格结尾，兼容标准C的字符串")])]),t._v(" "),a("li",[a("p",[t._v("为了避免对内存的操作，每次扩容都是")]),t._v(" "),a("section",[a("eqn",[a("span",{staticClass:"katex-display"},[a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[t._v("l")]),a("mi",[t._v("e")]),a("mi",[t._v("n")]),a("mo",[t._v("∗")]),a("mn",[t._v("2")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("\n  len*2\n  ")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.69444em","vertical-align":"0em"}}),a("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.01968em"}},[t._v("l")]),a("span",{staticClass:"mord mathdefault"},[t._v("e")]),a("span",{staticClass:"mord mathdefault"},[t._v("n")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),a("span",{staticClass:"mbin"},[t._v("∗")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[t._v("2")])])])])])])],1)]),t._v(" "),a("li",[a("p",[t._v("如果超过1MB(1024*104)，每次都只增加1MB, 如果插入的数据超过1MB，则增加n MB")])])]),t._v(" "),a("h2",{attrs:{id:"双向链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双向链表"}},[t._v("#")]),t._v(" 双向链表")]),t._v(" "),a("h2",{attrs:{id:"hash-字典"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hash-字典"}},[t._v("#")]),t._v(" HASH（字典）")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dictht")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hash表 二维数组")]),t._v("\n    dictEntry "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("table"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hash表大小")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hash大小掩码，用于计算索引值")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 总是等于 size-1 ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" sizemark"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 该hash表已有节点数量")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" used"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" dictht"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dict")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    dictType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("privdata"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    dictht ht"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" rehashidx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* rehashing not in progress if rehashidx == -1 */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int16_t")]),t._v(" pauserehash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* If >0 rehashing is paused (<0 indicates coding error) */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" dict\n")])])]),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dictEntry")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("union")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint64_t")]),t._v(" u64"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int64_t")]),t._v(" s64"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dictEntry")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" dictEntry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"扩容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩容"}},[t._v("#")]),t._v(" 扩容")]),t._v(" "),a("p",[t._v("每次扩容为")]),t._v(" "),a("section",[a("eqn",[a("span",{staticClass:"katex-display"},[a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("msup",[a("mn",[t._v("2")]),a("mi",[t._v("n")])],1),a("mtext",[t._v("且")]),a("mi",[t._v("u")]),a("mi",[t._v("s")]),a("mi",[t._v("e")]),a("mi",[t._v("d")]),a("mo",[t._v("∗")]),a("mn",[t._v("2")]),a("mo",[t._v("<")]),a("msup",[a("mn",[t._v("2")]),a("mi",[t._v("n")])],1)],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("\n2^n 且used*2 < 2^n\n")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.7143919999999999em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[a("span",{staticClass:"mord"},[t._v("2")]),a("span",{staticClass:"msupsub"},[a("span",{staticClass:"vlist-t"},[a("span",{staticClass:"vlist-r"},[a("span",{staticClass:"vlist",staticStyle:{height:"0.7143919999999999em"}},[a("span",{staticStyle:{top:"-3.113em","margin-right":"0.05em"}},[a("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),a("span",{staticClass:"sizing reset-size6 size3 mtight"},[a("span",{staticClass:"mord mathdefault mtight"},[t._v("n")])])])])])])])]),a("span",{staticClass:"mord cjk_fallback"},[t._v("且")]),a("span",{staticClass:"mord mathdefault"},[t._v("u")]),a("span",{staticClass:"mord mathdefault"},[t._v("s")]),a("span",{staticClass:"mord mathdefault"},[t._v("e")]),a("span",{staticClass:"mord mathdefault"},[t._v("d")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),a("span",{staticClass:"mbin"},[t._v("∗")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.68354em","vertical-align":"-0.0391em"}}),a("span",{staticClass:"mord"},[t._v("2")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),a("span",{staticClass:"mrel"},[t._v("<")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.7143919999999999em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[a("span",{staticClass:"mord"},[t._v("2")]),a("span",{staticClass:"msupsub"},[a("span",{staticClass:"vlist-t"},[a("span",{staticClass:"vlist-r"},[a("span",{staticClass:"vlist",staticStyle:{height:"0.7143919999999999em"}},[a("span",{staticStyle:{top:"-3.113em","margin-right":"0.05em"}},[a("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),a("span",{staticClass:"sizing reset-size6 size3 mtight"},[a("span",{staticClass:"mord mathdefault mtight"},[t._v("n")])])])])])])])])])])])])])],1),a("p",[a("em",[t._v("used为已使用的节点数量")])]),t._v(" "),a("h3",{attrs:{id:"解决冲突"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决冲突"}},[t._v("#")]),t._v(" 解决冲突")]),t._v(" "),a("p",[t._v("链地址法")]),t._v(" "),a("h3",{attrs:{id:"渐进式rehash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#渐进式rehash"}},[t._v("#")]),t._v(" 渐进式rehash")]),t._v(" "),a("p",[t._v("rehash动作不是一次完成的，而是分为多次，渐进式的完成。在一次插入千万级别的键值对的时候，避免服务器瘫痪。")]),t._v(" "),a("p",[t._v("将新插入的数据，都放到"),a("code",[t._v("ht[1]")]),t._v("中，然后将"),a("code",[t._v("h[0]")]),t._v("数据移动到h[1], 一个一个索引的进行rehash, 每移动完一个节点就会对"),a("code",[t._v("dict->rehashidx++")]),t._v(",")]),t._v(" "),a("p",[t._v("在rehash过程中进行查找，先找"),a("code",[t._v("h[0]")]),t._v("，再找"),a("code",[t._v("h[1]")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"跳跃表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跳跃表"}},[t._v("#")]),t._v(" 跳跃表")]),t._v(" "),a("p",[t._v("有序的数据结构，用作sortset的实现。时间复杂度，平均O(logN),最坏O(N)")]),t._v(" "),a("p",[a("strong",[t._v("分值")]),t._v("，即排序的顺序。")]),t._v(" "),a("h2",{attrs:{id:"整数集合的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整数集合的实现"}},[t._v("#")]),t._v(" 整数集合的实现")]),t._v(" "),a("h2",{attrs:{id:"压缩列表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#压缩列表"}},[t._v("#")]),t._v(" 压缩列表")]),t._v(" "),a("p",[t._v("当一个列表键只包含少量列表项，并且每个列表项要么就是小整数集值，要么就是长度较短的字符串，那么Redis就会使用压缩列表来做列表键的底层实现。")]),t._v(" "),a("p",[t._v("例如")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('RPUSH 1st 1 3 5 10086 "hello" "world"\n')])])]),a("h2",{attrs:{id:"quicklist"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#quicklist"}},[t._v("#")]),t._v(" quicklist")]),t._v(" "),a("p",[t._v("一个由"),a("strong",[t._v("ziplist组成的双向链表")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象"}},[t._v("#")]),t._v(" 对象")]),t._v(" "),a("p",[t._v("包含了上面介绍的字符串对象，列表对象，哈希对象，集合对象，有序集合对象。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("常量类型")]),t._v(" "),a("th",[t._v("对象的名称")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("REDIS_STRING")]),t._v(" "),a("td",[t._v("字符串对象")])]),t._v(" "),a("tr",[a("td",[t._v("REDIS_LIST")]),t._v(" "),a("td",[t._v("列表对象")])]),t._v(" "),a("tr",[a("td",[t._v("REDIS_HASH")]),t._v(" "),a("td",[t._v("哈希对象")])]),t._v(" "),a("tr",[a("td",[t._v("REDIS_SET")]),t._v(" "),a("td",[t._v("集合对象")])]),t._v(" "),a("tr",[a("td",[t._v("REDIS_ZSET")]),t._v(" "),a("td",[t._v("有序集合对象")])])])]),t._v(" "),a("h2",{attrs:{id:"数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库"}},[t._v("#")]),t._v(" 数据库")]),t._v(" "),a("p",[t._v("每个服务器默认16个数据库")]),t._v(" "),a("h3",{attrs:{id:"数据库键空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库键空间"}},[t._v("#")]),t._v(" 数据库键空间")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("redisDb")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    dict "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dict"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数据库键空间，保存着数据库中所有的键值对")]),t._v("\n    dict "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("expires"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Timeout of keys with a timeout set */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" redisDb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"设置键的生存时间或过期时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置键的生存时间或过期时间"}},[t._v("#")]),t._v(" 设置键的生存时间或过期时间")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("set <key> <value> EX <5，单位为second>")])]),t._v(" "),a("li",[a("code",[t._v("expire <key> <5，单位为second>")])]),t._v(" "),a("li",[a("code",[t._v("ttl <key>")]),t._v("查看键的过期时间还有多少秒")])]),t._v(" "),a("h3",{attrs:{id:"redis的过期键删除策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis的过期键删除策略"}},[t._v("#")]),t._v(" Redis的过期键删除策略")]),t._v(" "),a("p",[t._v("Redis服务使用的是惰性删除和定期删除两种策略")]),t._v(" "),a("ul",[a("li",[t._v("惰性删除（获取时，判断是否过期，如果过期了就删除）")]),t._v(" "),a("li",[t._v("定期删除（服务器定期的去删除过期的key）")])]),t._v(" "),a("h2",{attrs:{id:"rdb持久化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rdb持久化"}},[t._v("#")]),t._v(" RDB持久化")]),t._v(" "),a("p",[t._v("通过记录数据来实现持久化")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("save")]),t._v("命令会堵塞服务器进程，直到RDB文件创建完毕为止，在服务器堵塞期间，服务器不能处理任何命令请求")]),t._v(" "),a("li",[a("code",[t._v("bgsave")]),t._v("通过子进程来创建RDB文件，期间不能执行"),a("code",[t._v("save")])]),t._v(" "),a("li",[a("strong",[t._v("服务器载入RDB文件期间，会一直处于阻塞状态，直到载入工作完成。")])])]),t._v(" "),a("h3",{attrs:{id:"自动间隔保存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动间隔保存"}},[t._v("#")]),t._v(" 自动间隔保存")]),t._v(" "),a("ul",[a("li",[t._v("后台子进程执行")]),t._v(" "),a("li",[t._v("可以配置多个save的条件")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("save 900 1 // 900s修改了1次数据库，触发save,注意是这两个条件都满足\nsave 300 10 // 300s修改了10次数据库，触发save\nsave 60 10000\n// 以上3个条件满足任意一个都会执行bgsave\n")])])]),a("ul",[a("li")]),t._v(" "),a("h2",{attrs:{id:"aof持久化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aof持久化"}},[t._v("#")]),t._v(" AOF持久化")]),t._v(" "),a("p",[t._v("通过保持Redis服务器所执行的写命令来记录数据库状态")]),t._v(" "),a("p",[t._v("AOF持久化功能的实现分为命令追加（append）、文件写入、文件同步（sync）三个步骤")]),t._v(" "),a("h4",{attrs:{id:"aof重写"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aof重写"}},[t._v("#")]),t._v(" AOF重写")]),t._v(" "),a("p",[t._v("由于AOF文件会保存很多冗余的命令，所以体积大，通过重写可以还原当前数据库状态所必须的命令，去掉冗余命令，减小AOF文件大小。")]),t._v(" "),a("p",[t._v("在重写的时候，如果服务器继续执行命令，则这些命令将会被存放在aof_buf中。重写完成后再写入到文件。")]),t._v(" "),a("h2",{attrs:{id:"事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件"}},[t._v("#")]),t._v(" 事件")]),t._v(" "),a("p",[t._v("Redis服务器是一个事件驱动程序")]),t._v(" "),a("ul",[a("li",[t._v("文件事件（file event）\n"),a("ul",[a("li",[t._v("Redis服务器通过套接字与客户端进行连接，而文件事件就是服务器对套接字操作的抽象，服务器与客户端的通信会产生相应的文件事件，服务器通过监听处理这些事件来完成一系列网络通信操作。")])])]),t._v(" "),a("li",[t._v("时间事件（time event）：Redis服务器的一些操作（比如sererCron函数）需要在给定的时间点执行，而时间事件就是服务器对这类定时操作的抽象。")])]),t._v(" "),a("h2",{attrs:{id:"复制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复制"}},[t._v("#")]),t._v(" 复制")]),t._v(" "),a("ul",[a("li",[t._v("设为从库"),a("code",[t._v("slaveof host port")]),t._v("，从库为只读模式")]),t._v(" "),a("li",[t._v("取消从库"),a("code",[t._v("slaveof no one")])]),t._v(" "),a("li",[t._v("依靠主从库各自维护偏移量来判断主从是否一致")])]),t._v(" "),a("h2",{attrs:{id:"sentinel-高可用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sentinel-高可用"}},[t._v("#")]),t._v(" sentinel 高可用")]),t._v(" "),a("h2",{attrs:{id:"集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集群"}},[t._v("#")]),t._v(" 集群")]),t._v(" "),a("h2",{attrs:{id:"事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务"}},[t._v("#")]),t._v(" 事务")]),t._v(" "),a("p",[t._v("事务的实现")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("开始事务"),a("code",[t._v("MULTI")])])]),t._v(" "),a("li",[a("p",[t._v("命令入队")])]),t._v(" "),a("li",[a("p",[t._v("执行事务"),a("code",[t._v("EXEC")])])])]),t._v(" "),a("h3",{attrs:{id:"watch命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#watch命令"}},[t._v("#")]),t._v(" watch命令")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("不能再事务中执行")])]),t._v(" "),a("li",[a("p",[t._v("watch是一个乐观锁，它可以在"),a("code",[t._v("EXEC")]),t._v("命令执行之前，监视任意数量的数据库键，并在"),a("code",[t._v("EXEC")]),t._v("命令执行之时，检查被监视的键是否至少还有一个已经被修改过了，如果是的话，服务器将拒绝执行事务。")])]),t._v(" "),a("li",[a("p",[t._v("watch的是数据是否变脏了。")])]),t._v(" "),a("li",[a("p",[t._v("在当前会话每次"),a("code",[t._v("EXEC")]),t._v("之后，将会重置当前客户端会话所有的watch")])])]),t._v(" "),a("h2",{attrs:{id:"内存策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存策略"}},[t._v("#")]),t._v(" 内存策略")]),t._v(" "),a("h3",{attrs:{id:"限制内存大小"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#限制内存大小"}},[t._v("#")]),t._v(" 限制内存大小")]),t._v(" "),a("p",[a("code",[t._v("config set maxmemory 100MB")])]),t._v(" "),a("h3",{attrs:{id:"回收策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回收策略"}},[t._v("#")]),t._v(" 回收策略")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("noevication")]),t._v("：返回错误，当内存限制达到并且客户端尝试写入等使用到内存的命令。")]),t._v(" "),a("li",[a("code",[t._v("allkeys-lru")]),t._v("：尝试回收最少使用的键")]),t._v(" "),a("li",[a("code",[t._v("volatile-lru")]),t._v("：尝试回收最少使用的键，仅是过期集合的key")]),t._v(" "),a("li",[a("code",[t._v("allkeys-random")]),t._v("：随机回收key")]),t._v(" "),a("li",[a("code",[t._v("volatile-random")]),t._v("：随机回收key,  这些key仅是过期的key")]),t._v(" "),a("li",[a("code",[t._v("volatile-ttl")]),t._v("：回收过期key的集合，并且优先回收过期时间(TTL)较短的key")])]),t._v(" "),a("h2",{attrs:{id:"应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用"}},[t._v("#")]),t._v(" 应用")]),t._v(" "),a("h3",{attrs:{id:"分布式锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式锁"}},[t._v("#")]),t._v(" 分布式锁")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.cnblogs.com/williamjie/p/11250679.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("redisson"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("下面的命令是原子性操作，如果key存在则会返回nil，否则返回OK。")]),t._v(" "),a("p",[t._v("并且设置了过期时间，避免死锁")]),t._v(" "),a("p",[t._v("NX是IF NOT EXISTS的意思")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" lockkey "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" EX "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" NX\n")])])]),a("h3",{attrs:{id:"线程模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程模型"}},[t._v("#")]),t._v(" 线程模型")]),t._v(" "),a("p",[t._v("采用多路复用IO处理socket请求。每个socket请求进来之后，都会进入到通过多路复用IO进行调度和处理，然后将其放到队列里，等待redis单线程write/read。由于都是内存操作，所以单线程效率也很高。")]),t._v(" "),a("h2",{attrs:{id:"redis监控指标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis监控指标"}},[t._v("#")]),t._v(" redis监控指标")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("#./redis-cli\n> info\n")])])]),a("h3",{attrs:{id:"性能监控"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能监控"}},[t._v("#")]),t._v(" 性能监控")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("latency")]),t._v(" "),a("td",[t._v("Redis响应一个请求的时间")])]),t._v(" "),a("tr",[a("td",[t._v("instantaneous_ops_per_sec")]),t._v(" "),a("td",[t._v("平均每秒处理请求总数")])])])]),t._v(" "),a("h3",{attrs:{id:"内存监控"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存监控"}},[t._v("#")]),t._v(" 内存监控")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("used_memory")]),t._v(" "),a("td",[t._v("已用内存")])]),t._v(" "),a("tr",[a("td",[t._v("mem_fragmentation_ratio")]),t._v(" "),a("td",[t._v("内存碎片率")])]),t._v(" "),a("tr",[a("td",[t._v("evicted_keys")]),t._v(" "),a("td",[t._v("由于最大内存限制被移除的key的数量")])]),t._v(" "),a("tr",[a("td",[t._v("blocked_clients")]),t._v(" "),a("td",[t._v("由于BLPOP,BRPOP,or BRPOPLPUSH而备阻塞的客户端")])])])]),t._v(" "),a("h3",{attrs:{id:"基本活动指标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本活动指标"}},[t._v("#")]),t._v(" 基本活动指标")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("connected_clients")]),t._v(" "),a("td",[t._v("客户端连接数")])]),t._v(" "),a("tr",[a("td",[t._v("connect_slaves")]),t._v(" "),a("td",[t._v("slave数量")])]),t._v(" "),a("tr",[a("td",[t._v("master_last_io_seconds_ago")]),t._v(" "),a("td",[t._v("最近一次主从交互之后的秒数")])]),t._v(" "),a("tr",[a("td",[t._v("keyspace")]),t._v(" "),a("td",[t._v("数据库中的key值总数")])])])]),t._v(" "),a("h3",{attrs:{id:"持久化指标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#持久化指标"}},[t._v("#")]),t._v(" 持久化指标")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("rdb_last_save_time")]),t._v(" "),a("td",[t._v("最后一次持久化保存磁盘的时间戳")])]),t._v(" "),a("tr",[a("td",[t._v("rdb_changes_sice_last_save")]),t._v(" "),a("td",[t._v("自最后一次持久化以来数据库的更改数")])])])]),t._v(" "),a("h3",{attrs:{id:"错误指标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#错误指标"}},[t._v("#")]),t._v(" 错误指标")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("rejected_connects")]),t._v(" "),a("td",[t._v("由于达到maxClient限制而被拒绝的连接数")])]),t._v(" "),a("tr",[a("td",[t._v("keyspace_misses")]),t._v(" "),a("td",[t._v("key值查找没命中的次数")])]),t._v(" "),a("tr",[a("td",[t._v("master_link_down_since_seconds")]),t._v(" "),a("td",[t._v("主从断开的持续时间（以秒为单位)")])])])]),t._v(" "),a("h2",{attrs:{id:"监控的命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#监控的命令"}},[t._v("#")]),t._v(" 监控的命令")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1. redis-benchmark \n#./redis-benchmark -c 100 -n 5000 redis性能测试命令 100个连接，5000次请求对应的性能\n\n2. redis-stat\n3. redis-faina\n4. redislive\n5. redis-cli\n6. monitor\n7. showlog\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);