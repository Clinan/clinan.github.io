(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{484:function(t,a,s){"use strict";s.r(a);var e=s(10),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"计算机组成原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#计算机组成原理"}},[t._v("#")]),t._v(" 计算机组成原理")]),t._v(" "),s("h2",{attrs:{id:"二进制整数及其运算"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二进制整数及其运算"}},[t._v("#")]),t._v(" 二进制整数及其运算")]),t._v(" "),s("ol",{attrs:{start:"0"}},[s("li",[t._v("真数：数值在计算机中的真实存储；如[+2]为[00000010]，[-2]为 [10000010]")]),t._v(" "),s("li",[t._v("原码：指其他进制转换为二进制的值 如 十进制23=0001 0111, -23 = 1001 0111, 最高位1表示负数")]),t._v(" "),s("li",[t._v("反码，正数的反码是其本身，负数的反码除了符号位，按位取反，23=0110 1000，-23=1110 1000")]),t._v(" "),s("li",[t._v("补码：为了方便计算机进行加减乘除，正数的补码是本身，负数的补码=反码+1， 23=0110 1000 -23=1110 1001")]),t._v(" "),s("li",[t._v("移码: (符号位取反)  一般用于比较大小")])]),t._v(" "),s("h3",{attrs:{id:"按位运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#按位运算符"}},[t._v("#")]),t._v(" 按位运算符")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("&")]),t._v("：按位与操作，都为1才为1，否则为0，如1&1=1; 1&0=0; 0&0=0; 0&1=0;")]),t._v(" "),s("li",[s("code",[t._v("|")]),t._v("：按位或操作，有一个为1就是1，否则为0，如1&1=1; 1&0=1; 0&0=0; 0&1=1;")]),t._v(" "),s("li",[s("code",[t._v("^")]),t._v("：按位异或，如果相同则为0，不相同则为1，如1&1=0; 1&0=1; 0&0=0; 0&1=1;")]),t._v(" "),s("li",[s("code",[t._v("~")]),t._v("：取反预算符号")])]),t._v(" "),s("h3",{attrs:{id:"加法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#加法"}},[t._v("#")]),t._v(" 加法")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\n\n\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);